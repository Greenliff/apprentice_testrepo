// <auto-generated />
using System;
using Hangman.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Hangman.Migrations
{
    [DbContext(typeof(HangmanContext))]
    [Migration("20190409121231_TestCreate")]
    partial class TestCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085");

            modelBuilder.Entity("Hangman.Models.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int>("LanguageId");

                    b.Property<int>("TriesLeft");

                    b.Property<int>("UserId");

                    b.HasKey("GameId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Hangman.Models.GuessedLetter", b =>
                {
                    b.Property<int>("GuessedLetterId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("LetterId");

                    b.Property<int>("WordInGameId");

                    b.HasKey("GuessedLetterId");

                    b.HasIndex("LetterId");

                    b.HasIndex("WordInGameId");

                    b.ToTable("GuessedLetters");
                });

            modelBuilder.Entity("Hangman.Models.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LanguageName")
                        .IsRequired();

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Hangman.Models.LetterInfo", b =>
                {
                    b.Property<int>("LetterId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("LanguageId");

                    b.Property<char>("Letter");

                    b.HasKey("LetterId");

                    b.HasIndex("LanguageId");

                    b.ToTable("LetterInfos");
                });

            modelBuilder.Entity("Hangman.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsAdmin");

                    b.Property<string>("Mail")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Hangman.Models.WordApproval", b =>
                {
                    b.Property<int>("WordApprovalId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int>("UserId");

                    b.Property<int>("WordId");

                    b.HasKey("WordApprovalId");

                    b.HasIndex("UserId");

                    b.HasIndex("WordId");

                    b.ToTable("WordApprovals");
                });

            modelBuilder.Entity("Hangman.Models.WordInfo", b =>
                {
                    b.Property<int>("WordId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateSubmitted");

                    b.Property<bool>("IsApproved");

                    b.Property<int>("LanguageId");

                    b.Property<int>("SubmitterId");

                    b.Property<string>("Word")
                        .IsRequired();

                    b.HasKey("WordId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SubmitterId");

                    b.ToTable("WordInfos");
                });

            modelBuilder.Entity("Hangman.Models.WordInGame", b =>
                {
                    b.Property<int>("WordInGameId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GameId");

                    b.Property<int>("State");

                    b.Property<int>("WordId");

                    b.HasKey("WordInGameId");

                    b.HasIndex("GameId");

                    b.HasIndex("WordId");

                    b.ToTable("WordsInGame");
                });

            modelBuilder.Entity("Hangman.Models.Game", b =>
                {
                    b.HasOne("Hangman.Models.Language", "Language")
                        .WithMany("Games")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hangman.Models.User", "User")
                        .WithMany("Games")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hangman.Models.GuessedLetter", b =>
                {
                    b.HasOne("Hangman.Models.LetterInfo", "Letters")
                        .WithMany("GuessedLetters")
                        .HasForeignKey("LetterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hangman.Models.WordInGame", "WordsInGames")
                        .WithMany("GuessedLetters")
                        .HasForeignKey("WordInGameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hangman.Models.LetterInfo", b =>
                {
                    b.HasOne("Hangman.Models.Language", "Language")
                        .WithMany("Letters")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hangman.Models.WordApproval", b =>
                {
                    b.HasOne("Hangman.Models.User", "User")
                        .WithMany("WordApprovals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hangman.Models.WordInfo", "Word")
                        .WithMany("WordApprovals")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hangman.Models.WordInfo", b =>
                {
                    b.HasOne("Hangman.Models.Language", "Language")
                        .WithMany("Words")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hangman.Models.User", "Submitter")
                        .WithMany("Words")
                        .HasForeignKey("SubmitterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hangman.Models.WordInGame", b =>
                {
                    b.HasOne("Hangman.Models.Game", "Game")
                        .WithMany("WordsInGame")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hangman.Models.WordInfo", "Word")
                        .WithMany("WordInGames")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
